import { AnimationBuilder } from '@angular/animations';
import { ListKeyManager } from '@angular/cdk/a11y';
import { AfterContentInit, AfterViewInit, EventEmitter, OnDestroy, QueryList, Renderer2 } from '@angular/core';
import { ThemePalette } from '@angular/material/core';
import { MatCarousel, Orientation, SvgIconOverrides } from './carousel';
import { MatCarouselSlideComponent } from './carousel-slide/carousel-slide.component';
import * as ɵngcc0 from '@angular/core';
export declare class MatCarouselComponent implements AfterContentInit, AfterViewInit, MatCarousel, OnDestroy {
    private animationBuilder;
    private renderer;
    private platformId;
    timings: string;
    svgIconOverrides: SvgIconOverrides;
    autoplay: boolean;
    interval: number;
    loop: boolean;
    hideArrows: boolean;
    hideIndicators: boolean;
    color: ThemePalette;
    maxWidth: string;
    maintainAspectRatio: boolean;
    proportion: number;
    slideHeight: string;
    slides: number;
    useKeyboard: boolean;
    useMouseWheel: boolean;
    orientation: Orientation;
    change: EventEmitter<number>;
    readonly currentIndex: number;
    readonly currentSlide: MatCarouselSlideComponent;
    slidesList: QueryList<MatCarouselSlideComponent>;
    private carouselContainer;
    private carouselList;
    listKeyManager: ListKeyManager<MatCarouselSlideComponent>;
    private _autoplay;
    private autoplay$;
    private interval$;
    private slides$;
    private _maxWidth;
    private maxWidth$;
    private _loop;
    private loop$;
    private _orientation;
    private orientation$;
    private timer$;
    private timerStop$;
    private destroy$;
    private playing;
    constructor(animationBuilder: AnimationBuilder, renderer: Renderer2, platformId: any);
    ngAfterContentInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    next(): void;
    previous(): void;
    slideTo(index: number): void;
    onKeyUp(event: KeyboardEvent): void;
    onMouseEnter(): void;
    onMouseLeave(): void;
    onMouseWheel(event: MouseWheelEvent): void;
    onResize(event: Event): void;
    onPan(event: any, slideElem: HTMLElement): void;
    onPanEnd(event: any, slideElem: HTMLElement): void;
    private isOutOfBounds;
    private isVisible;
    private getOffset;
    private getTranslation;
    private getWidth;
    private goto;
    private playAnimation;
    private resetSlides;
    private resetTimer;
    private startTimer;
    private stopTimer;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MatCarouselComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<MatCarouselComponent, "mat-carousel", never, { "timings": "timings"; "hideArrows": "hideArrows"; "hideIndicators": "hideIndicators"; "color": "color"; "maintainAspectRatio": "maintainAspectRatio"; "proportion": "proportion"; "slideHeight": "slideHeight"; "useKeyboard": "useKeyboard"; "useMouseWheel": "useMouseWheel"; "autoplay": "autoplay"; "interval": "interval"; "loop": "loop"; "maxWidth": "maxWidth"; "slides": "slides"; "orientation": "orientation"; "svgIconOverrides": "svgIconOverrides"; }, { "change": "change"; }, ["slidesList"], never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2Fyb3VzZWwuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbImNhcm91c2VsLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQW5pbWF0aW9uQnVpbGRlciB9IGZyb20gJ0Bhbmd1bGFyL2FuaW1hdGlvbnMnO1xuaW1wb3J0IHsgTGlzdEtleU1hbmFnZXIgfSBmcm9tICdAYW5ndWxhci9jZGsvYTExeSc7XG5pbXBvcnQgeyBBZnRlckNvbnRlbnRJbml0LCBBZnRlclZpZXdJbml0LCBFdmVudEVtaXR0ZXIsIE9uRGVzdHJveSwgUXVlcnlMaXN0LCBSZW5kZXJlcjIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFRoZW1lUGFsZXR0ZSB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL2NvcmUnO1xuaW1wb3J0IHsgTWF0Q2Fyb3VzZWwsIE9yaWVudGF0aW9uLCBTdmdJY29uT3ZlcnJpZGVzIH0gZnJvbSAnLi9jYXJvdXNlbCc7XG5pbXBvcnQgeyBNYXRDYXJvdXNlbFNsaWRlQ29tcG9uZW50IH0gZnJvbSAnLi9jYXJvdXNlbC1zbGlkZS9jYXJvdXNlbC1zbGlkZS5jb21wb25lbnQnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTWF0Q2Fyb3VzZWxDb21wb25lbnQgaW1wbGVtZW50cyBBZnRlckNvbnRlbnRJbml0LCBBZnRlclZpZXdJbml0LCBNYXRDYXJvdXNlbCwgT25EZXN0cm95IHtcbiAgICBwcml2YXRlIGFuaW1hdGlvbkJ1aWxkZXI7XG4gICAgcHJpdmF0ZSByZW5kZXJlcjtcbiAgICBwcml2YXRlIHBsYXRmb3JtSWQ7XG4gICAgdGltaW5nczogc3RyaW5nO1xuICAgIHN2Z0ljb25PdmVycmlkZXM6IFN2Z0ljb25PdmVycmlkZXM7XG4gICAgYXV0b3BsYXk6IGJvb2xlYW47XG4gICAgaW50ZXJ2YWw6IG51bWJlcjtcbiAgICBsb29wOiBib29sZWFuO1xuICAgIGhpZGVBcnJvd3M6IGJvb2xlYW47XG4gICAgaGlkZUluZGljYXRvcnM6IGJvb2xlYW47XG4gICAgY29sb3I6IFRoZW1lUGFsZXR0ZTtcbiAgICBtYXhXaWR0aDogc3RyaW5nO1xuICAgIG1haW50YWluQXNwZWN0UmF0aW86IGJvb2xlYW47XG4gICAgcHJvcG9ydGlvbjogbnVtYmVyO1xuICAgIHNsaWRlSGVpZ2h0OiBzdHJpbmc7XG4gICAgc2xpZGVzOiBudW1iZXI7XG4gICAgdXNlS2V5Ym9hcmQ6IGJvb2xlYW47XG4gICAgdXNlTW91c2VXaGVlbDogYm9vbGVhbjtcbiAgICBvcmllbnRhdGlvbjogT3JpZW50YXRpb247XG4gICAgY2hhbmdlOiBFdmVudEVtaXR0ZXI8bnVtYmVyPjtcbiAgICByZWFkb25seSBjdXJyZW50SW5kZXg6IG51bWJlcjtcbiAgICByZWFkb25seSBjdXJyZW50U2xpZGU6IE1hdENhcm91c2VsU2xpZGVDb21wb25lbnQ7XG4gICAgc2xpZGVzTGlzdDogUXVlcnlMaXN0PE1hdENhcm91c2VsU2xpZGVDb21wb25lbnQ+O1xuICAgIHByaXZhdGUgY2Fyb3VzZWxDb250YWluZXI7XG4gICAgcHJpdmF0ZSBjYXJvdXNlbExpc3Q7XG4gICAgbGlzdEtleU1hbmFnZXI6IExpc3RLZXlNYW5hZ2VyPE1hdENhcm91c2VsU2xpZGVDb21wb25lbnQ+O1xuICAgIHByaXZhdGUgX2F1dG9wbGF5O1xuICAgIHByaXZhdGUgYXV0b3BsYXkkO1xuICAgIHByaXZhdGUgaW50ZXJ2YWwkO1xuICAgIHByaXZhdGUgc2xpZGVzJDtcbiAgICBwcml2YXRlIF9tYXhXaWR0aDtcbiAgICBwcml2YXRlIG1heFdpZHRoJDtcbiAgICBwcml2YXRlIF9sb29wO1xuICAgIHByaXZhdGUgbG9vcCQ7XG4gICAgcHJpdmF0ZSBfb3JpZW50YXRpb247XG4gICAgcHJpdmF0ZSBvcmllbnRhdGlvbiQ7XG4gICAgcHJpdmF0ZSB0aW1lciQ7XG4gICAgcHJpdmF0ZSB0aW1lclN0b3AkO1xuICAgIHByaXZhdGUgZGVzdHJveSQ7XG4gICAgcHJpdmF0ZSBwbGF5aW5nO1xuICAgIGNvbnN0cnVjdG9yKGFuaW1hdGlvbkJ1aWxkZXI6IEFuaW1hdGlvbkJ1aWxkZXIsIHJlbmRlcmVyOiBSZW5kZXJlcjIsIHBsYXRmb3JtSWQ6IGFueSk7XG4gICAgbmdBZnRlckNvbnRlbnRJbml0KCk6IHZvaWQ7XG4gICAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICBuZXh0KCk6IHZvaWQ7XG4gICAgcHJldmlvdXMoKTogdm9pZDtcbiAgICBzbGlkZVRvKGluZGV4OiBudW1iZXIpOiB2b2lkO1xuICAgIG9uS2V5VXAoZXZlbnQ6IEtleWJvYXJkRXZlbnQpOiB2b2lkO1xuICAgIG9uTW91c2VFbnRlcigpOiB2b2lkO1xuICAgIG9uTW91c2VMZWF2ZSgpOiB2b2lkO1xuICAgIG9uTW91c2VXaGVlbChldmVudDogTW91c2VXaGVlbEV2ZW50KTogdm9pZDtcbiAgICBvblJlc2l6ZShldmVudDogRXZlbnQpOiB2b2lkO1xuICAgIG9uUGFuKGV2ZW50OiBhbnksIHNsaWRlRWxlbTogSFRNTEVsZW1lbnQpOiB2b2lkO1xuICAgIG9uUGFuRW5kKGV2ZW50OiBhbnksIHNsaWRlRWxlbTogSFRNTEVsZW1lbnQpOiB2b2lkO1xuICAgIHByaXZhdGUgaXNPdXRPZkJvdW5kcztcbiAgICBwcml2YXRlIGlzVmlzaWJsZTtcbiAgICBwcml2YXRlIGdldE9mZnNldDtcbiAgICBwcml2YXRlIGdldFRyYW5zbGF0aW9uO1xuICAgIHByaXZhdGUgZ2V0V2lkdGg7XG4gICAgcHJpdmF0ZSBnb3RvO1xuICAgIHByaXZhdGUgcGxheUFuaW1hdGlvbjtcbiAgICBwcml2YXRlIHJlc2V0U2xpZGVzO1xuICAgIHByaXZhdGUgcmVzZXRUaW1lcjtcbiAgICBwcml2YXRlIHN0YXJ0VGltZXI7XG4gICAgcHJpdmF0ZSBzdG9wVGltZXI7XG59XG4iXX0=